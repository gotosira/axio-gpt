// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // For custom auth
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  settings      UserSettings?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            String   @id @default(cuid())
  title         String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  assistantId   String?  // Which assistant this conversation belongs to
  isArchived    Boolean  @default(false)
  isPinned      Boolean  @default(false)
  lastMessageAt DateTime @default(now())
  messageCount  Int      @default(0)
  settings      Json?    // Store conversation-specific settings
  tags          String[] // Tags for organization
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  role           String       // "user" or "assistant"
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  feedback       String?      // "like", "dislike", or null
  parentId       String?      // For reply functionality
  parent         Message?     @relation("MessageReplies", fields: [parentId], references: [id])
  replies        Message[]    @relation("MessageReplies")
  attachments    Json?        // Store file attachments info
  metadata       Json?        // Additional message metadata
  tokens         Int?         // Token count for cost tracking
  createdAt      DateTime     @default(now())
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Chat preferences
  defaultAssistant      String?  @default("bao-bao")
  chatTheme            String?  @default("light")
  fontSize             String?  @default("medium")
  autoSaveConversations Boolean @default(true)
  
  // Notification settings
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  messageSound          Boolean @default(true)
  
  // Privacy settings
  shareUsageData        Boolean @default(false)
  allowAnalytics        Boolean @default(true)
  
  // Advanced settings
  maxTokensPerMessage   Int?    @default(4000)
  temperature          Float?  @default(0.7)
  systemPrompt         String?
  
  // UI preferences
  sidebarCollapsed     Boolean @default(false)
  showTokenCount       Boolean @default(false)
  compactMode          Boolean @default(false)
  
  // Storage settings
  autoArchiveDays      Int?    @default(30)
  maxConversations     Int?    @default(100)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
